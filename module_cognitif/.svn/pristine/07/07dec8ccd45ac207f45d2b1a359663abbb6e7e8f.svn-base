/**
 * Created by rlespagnol on 27/09/2016.
 */
/**
 * Created by rlespagnol on 25/04/2016.
 */
var fs = require('fs');
var csvWriter = require('csv-write-stream');
//var csvwriter = csvWriter();

module.exports = {
        test(req, res) {
        
        res.download('faq.csv')

        },
    getFile(req, res) {
        const type = req.param('type');
        if (!type) return res.badRequest(null, {
            message: 'You should specify a "data_sentence" parameter!'
        });
        res.download(type + '.csv')
    },

    new(req, res) {
        const sentence = req.param('sentence');
        const class_suggestion_faq = req.param('class_suggestion_faq');
        const confidence_class_suggestion_faq = req.param('confidence_class_suggestion_faq');
        const class_suggestion_intent = req.param('class_suggestion_intent');
        const confidence_class_suggestion_intent = req.param('confidence_class_suggestion_intent');

        if (!sentence) return res.badRequest(null, {
            message: 'You should specify a "data_sentence" parameter!'
        });
        if (!class_suggestion_faq) return res.badRequest(null, {
            message: 'You should specify a "class_suggestion_faq" parameter!'
        });
        if (!confidence_class_suggestion_faq) return res.badRequest(null, {
            message: 'You should specify a "confidence_class_suggestion_faq" parameter!'
        });
        if (!class_suggestion_intent) return res.badRequest(null, {
            message: 'You should specify a "class_suggestion_intent" parameter!'
        });
        if (!confidence_class_suggestion_intent) return res.badRequest(null, {
            message: 'You should specify a "confidence_class_suggestion_intent" parameter!'
        });

        TrainingData.create({
            sentence: sentence,
            class_suggestion_faq: class_suggestion_faq,
            confidence_class_suggestion_faq: confidence_class_suggestion_faq,
            class_suggestion_intent: class_suggestion_intent,
            confidence_class_suggestion_intent: confidence_class_suggestion_intent,

        }).exec(function(err, results) {
            if (err) {
                sails.log(err);
            }

            if (results) {
                sails.log(results);
                return res.json(results);

            }
        })


    },

    findAllByState(req, res) {
        const state = req.param('state');

        if (!state) return res.badRequest(null, {
            message: 'You should specify a "state" parameter!'
        });
        NLC.find().exec(function(err, listNLCType) {

            if (err) {
                sails.log({
                    error: err
                });
                return res.json({
                    error: err
                });
            }

            TrainingData.find({
                state: state
            }).exec(function(err, results) {
                if (err) {
                    sails.log({
                        error: err
                    });
                    return res.json({
                        error: err
                    });
                }

                if (results) {
                    return res.json({
                        types: listNLCType,
                        data: results
                    });
                }
            });

        });


    },

    deleteAll(req, res) {
        TrainingData.destroy().exec(function(err, results) {
            if (err) {
                sails.log(err);
                return res.json({
                    error: err
                });
            }
            if (results) {
                sails.log(results);
                return res.json(results);
            }
        });
    },
    deleteAllByType(req, res) {
        const state = req.param('state');

        if (!state) return res.badRequest(null, {
            message: 'You should specify a "state" parameter!'
        });
        TrainingData.destroy({
            state: state
        }).exec(function(err, results) {
            if (err) {
                sails.log(err);
                return res.json({
                    error: err
                });
            }
            if (results) {
                sails.log(results);
                return res.json(results);
            }
        });
    },
    delete(req, res) {

        const id = req.param('id');
        sails.log("delete training test" + id);

        if (!id) return res.badRequest(null, {
            message: 'You should specify a "data_id" parameter!'
        });
        TrainingData.destroy({
            id: id
        }).exec(function(err, results) {
            sails.log("delete training test" + id);
            if (err) {
                sails.log(err);
                return res.json({
                    error: err
                });
            }
            if (results) {
                sails.log(results);
                return res.json(results);
            }
        });
    },

    training(req, res) {
        const id = req.param('id');

        const correction = req.param('correction');


        NLC.getTypeOfNLC(correction, function(e, r) {
            if (e) {
                sails.log(e);
                return res.json({
                    error: e
                });
            }
            var type = r;

            sails.log("trainig training test:" + id);
            sails.log("correction:" + correction);
            sails.log("type:" + type);

            if (!id) return res.badRequest(null, {
                message: 'You should specify a "data_id" parameter!'
            });
            //  if (!type) return res.badRequest(null, {message: 'You should specify a "type" parameter!'});
            if (!correction) return res.badRequest(null, {
                message: 'You should specify a "correction" parameter!'
            });
            TrainingData.update({
                id: id
            }, {
                type: type,
                correction: correction,
                validate: true,
                state: 'toTrained'
            }).exec(function(err, update) {
                if (err) {
                    sails.log(err);
                    return res.json({
                        error: err
                    });
                }
                if (update) {
                    sails.log(update);
                    return res.json(update);
                }
            });


        });


    },
    validateTrainings(req, res) {
        TrainingData.update({
            state: 'toTrained'
        }, {
            state: 'alreadyTrained'
        }).exec(function(err, update) {
            if (err) {
                sails.log(err);
                return res.json({
                    error: err
                });
            }
            if (update) {
                sails.log(update);
                return res.json(update);
            }
        });


    },

    generateCSV(req, res) {

        const type = req.param('type');
        sails.log("type:" + type);

        //  if (!type) return res.badRequest(null, {message: 'You should specify a "type" parameter!'});
        if (!type) return res.badRequest(null, {
            message: 'You should specify a "type" parameter!'
        });
        TrainingData.find({
            type: type,
            state: 'alreadyTrained'
        }).exec(function(err, results) {
            if (err) {
                sails.log(err);
                return res.json({
                    error: err
                });
            }

            if (results) {
                sails.log("generate  csv");
                var writer = csvWriter({
                    sendHeaders: false
                });
                writer.pipe(fs.createWriteStream(type + '.csv'));
                results.forEach(function(arrayItem) {
                    writer.write({
                        sentence: arrayItem.sentence,
                        class: arrayItem.correction
                    });

                    //writer.write([arrayItem.sentence , arrayItem.correction]);

                });
                // writer.write({hello: "world", foo: "bar", baz: "taco"});
                writer.end();
                sails.log(results);
                return res.json(results);

            }
        });


    },

    sendNLCFAQToWatson(req, res) {
        sails.log("CREATE NLC :");

        var lang = req.param('lang');
        var name = req.param('name');
        if (!lang || (lang !== 'fr' && lang !== 'en')) lang = 'en';

        const credentials = CredentialService.getNLCCredentials(lang);
        sails.log("CREATE NLC2 :");


        if (!name) return res.badRequest(null, {
            message: 'You should specify a "name" parameter!'
        });

        sails.log("CREATE NLC3 :");

        TrainingData.find({
            type: 'faq',
            state: 'alreadyTrained'
        }).exec(function(err, results) {
            if (err) {
                sails.log(err);
                return res.json({
                    error: err
                });


            }

            if (results) {
                sails.log("generate  csv");
                var writer = csvWriter({
                    sendHeaders: false
                });
                writer.pipe(fs.createWriteStream('faq.csv'));
                results.forEach(function(arrayItem) {
                    writer.write({
                        sentence: arrayItem.sentence,
                        class: arrayItem.correction
                    });

                    //writer.write([arrayItem.sentence , arrayItem.correction]);

                });
                // writer.write({hello: "world", foo: "bar", baz: "taco"});
                writer.end();


                NLCService.createClassifier(credentials, lang, name, fs.createReadStream('faq.csv'), function(err, result) {
                    sails.log("CREATE NLC RESULT:");

                    if (err) {
                        sails.log(err);

                        return res.json({
                            error: err
                        });
                    }
                    sails.log(results);

                    return res.json({
                        stateTraining: "ok",
                        name: name,
                        result: results
                    });
                })


            }
        });


    }


};