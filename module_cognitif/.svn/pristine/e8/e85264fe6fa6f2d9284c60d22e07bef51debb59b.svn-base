/**
 * Created by rlespagnol on 25/04/2016.
 */

var fs = require('fs');


module.exports = {
    create(req, res){

        const name = req.param('name');
        var lang = req.param('lang');
        if (!lang || (lang !== 'fr' && lang !== 'en')) lang = 'en';

        const credentials = CredentialService.getNLCCredentials(lang);


        if (!name) return res.badRequest(null, {message: 'You should specify a "name" parameter!'});


        req.file('csv').upload({maxBytes: Number.MAX_VALUE}, function (err, uploadedFiles) {
            if (err) return res.send(500, err);

            if (uploadedFiles.length === 0) return res.badRequest(null, {message: 'You should send a csv file'});

            NLCService.createClassifier(credentials, lang, name, fs.createReadStream(uploadedFiles[0].fd), function (err, result) {

                if (err)
                    return res.json({
                        error: err
                    });

                return res.ok();
            })


        });
    },
    info(req, res){
        const classifier_id = req.param('classifier_id');
        var lang = req.param('lang');
        if (!lang || (lang !== 'fr' && lang !== 'en')) lang = 'en';

        const credentials = CredentialService.getNLCCredentials(lang);

        if (!classifier_id) return res.badRequest(null, {message: 'You should specify a "classifier_id" parameter!'});

        NLCService.getClassifierInformation(credentials, classifier_id, function (err, result) {
            return res.json({
                error: err,
                message: result
            });
        })
    },
    delete(req, res){
        const classifier_id = req.param('classifier_id');
        var lang = req.param('lang');
        if (!lang || (lang !== 'fr' && lang !== 'en')) lang = 'en';

        const credentials = CredentialService.getNLCCredentials(lang);

        if (!classifier_id) return res.badRequest(null, {message: 'You should specify a "classifier_id" parameter!'});

        NLCService.deleteClassifier(credentials, classifier_id, function (err, result) {
            return res.json({
                error: err,
                message: result
            });
        })
    },
    list(req, res){
        var lang = req.param('lang');
        if (!lang || (lang !== 'fr' && lang !== 'en')) lang = 'en';

        const credentials = CredentialService.getNLCCredentials(lang);

        NLCService.getClassifiers(credentials, function (err, result) {
            return res.json({
                error: err,
                message: result
            });
        })
    },
    classify(req, res){
        const text = req.param('text');
        const classifier_id = req.param('classifier_id');

        var lang = req.param('lang');
        if (!lang || (lang !== 'fr' && lang !== 'en')) lang = 'en';

        const credentials = CredentialService.getNLCCredentials(lang);

        if (!text) return res.badRequest(null, {message: 'You should send param \'text\''});
        if (!classifier_id) return res.badRequest(null, {message: 'You should send param \'classifier_id\''});

        NLCService.classify(credentials, text, classifier_id, function (err, result) {
            return res.json({
                error: err,
                message: result
            })
        })
    },
    initType(req, res) {

        var tab = [{
            name: "balance",
            type: "faq"
        }, {
            name: "limits",
            type: "faq"
        }, {
            name: "international_option",
            type: "faq"
        }, {
            name: "how_block_card",
            type: "faq"
        }, {
            name: "contactless_card",
            type: "faq"
        }, {
            name: "systematic_authorisation",
            type: "faq"
        }, {
            name: "deferred_debit",
            type: "faq"
        }, {
            name: "immediate_debit",
            type: "faq"
        }, {
            name: "online_payment_cancellation",
            type: "faq"
        }, {
            name: "against_fraud",
            type: "faq"
        }, {
            name: "outstandings",
            type: "faq"
        }, {
            name: "authorized_overdraft",
            type: "faq"
        }, {
            name: "order_card",
            type: "faq"
        }, {
            name: "premium_card_advantages",
            type: "faq"
        }, {
            name: "internet_option",
            type: "faq"
        }, {
            name: "password",
            type: "faq"
        }, {
            name: "price_new_card",
            type: "faq"
        }, {
            name: "premium_card_advantages",
            type: "faq"
        }, {
            name: "new_card",
            type: "intent"
        }, {
            name: "pb_card",
            type: "intent"
        }, {
            name: "pb_withdrawal",
            type: "intent"
        }];

        NLC.create(tab).exec(function (err, results) {
            if (err) {
                return res.json({
                    error: err
                });

            }
            return res.json({
                data: results
            });

        });
    },
    findAllType(req, res) {
        NLC.find().exec(function (err, results) {
            if (err) {
                sails.log(err);
                return res.json({
                    error: err
                });
            }
            if (results) {
                sails.log(results);
                return res.json({
                    data: results
                });

            }
        });


    },
    findAllTypeIntent(req, res) {


        NLC.find({
            type: 'intent'
        }).exec(function (err, results) {
            if (err) {
                sails.log(err);
                return res.json({
                    error: err
                });
            }
            if (results) {
                sails.log(results);
                return res.json({
                    data: results
                });
            }
        });


    },
    findAllTypeFAQ(req, res) {
        NLC.find({
            type: 'faq'
        }).exec(function (err, results) {
            if (err) {
                sails.log(err);
                return res.json({
                    error: err
                });
            }
            if (results) {
                sails.log(results);
                return res.json({
                    data: results
                });
            }
        });
    },
}